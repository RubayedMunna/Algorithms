


/// Longest Path Finding using Reverse Dijkstra Algo

const ll MAX_ELEMENT=100000;
ll n;
ll ara[MAX_ELEMENT];
struct Node
{
    ll  att,cost;
    Node(ll _att,ll _cost)
    {
        att=_att;
        cost=_cost;
    }
};
bool operator<(Node A,Node B)
{
    return A.cost<B.cost;
}
struct Edge
{
    ll v;
    ll w;
};
vector<Edge>adj[MAX_ELEMENT];
priority_queue<Node>PQ;

ll dist[MAX_ELEMENT];

void Dijkstra(ll s)
{
    for(ll i=0;i<n;i++)
    {
        dist[i]=LLONG_MIN;
    }
    dist[s]=0;
    PQ.push(Node(s,0));
    while(!PQ.empty())
    {
        Node u=PQ.top();
        PQ.pop();
        if(u.cost!=dist[u.att])
        {
            continue;
        }
        for(Edge e:adj[u.att])
        {
            if(dist[e.v]<u.cost+e.w)
            {
                dist[e.v]=u.cost+e.w;
                PQ.push(Node(e.v,dist[e.v]));
            }
        }
    }
}
void solve(ll tst)
{
    ll n,m;
    cin>>n>>m;
    for(ll i=0;i<n;i++)
    {
        cin>>ara[i];
    }
    for(ll i=1;i<=m;i++)
    {
        ll x,y;
        cin>>x>>y;
        adj[x].push_back({y,ara[y]});
    }
    
    ll source;
    
    cout<<"Enter a source: "<<N;
    cin>>source;
    
    Dijkstra(source);
    
    cout<<"Longest Path of Every node from Source is "<<N;
    
    for(ll i=0;i<n;i++)
    {
        cout<<dist[i]<<" ";
    }
    cout<<N;
}


